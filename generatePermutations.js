//1)generatePermutations
function generatePermutations(numbers) {
  const permutations = [];
  
  for (let i = 0; i < numbers.length; i++) {
    for (let j = 0; j < numbers.length; j++) {
      for (let k = 0; k < numbers.length; k++) {
        if (i !== j && j !== k && i !== k) {
          permutations.push([numbers[i], numbers[j], numbers[k]]);
        }
      }
    }
  }
  
  return permutations;
}

const numbers = [1, 2, 3];
const result = generatePermutations(numbers);
console.log(result);

/*
output:
[
  [1, 2, 3],
  [1, 3, 2],
  [2, 1, 3],
  [2, 3, 1],
  [3, 1, 2],
  [3, 2, 1]
]
*/

//2)Permutations using recusion for 5 numbers input
function generatePermutations(numbers) {
  const permutations = [];

  function permute(arr, temp = []) {
    if (arr.length === 0) {
      permutations.push(temp);
    } else {
      for (let i = 0; i < arr.length; i++) {
        const newArr = arr.slice(0, i).concat(arr.slice(i + 1));
        permute(newArr, temp.concat(arr[i]));
      }
    }
  }

  permute(numbers);

  return permutations;
}

const numbers = [1, 2, 3, 4, 5];
const result = generatePermutations(numbers);
console.log(result);

/* Output:
[  [ 1, 2, 3, 4, 5 ],
  [ 1, 2, 3, 5, 4 ],
  [ 1, 2, 4, 3, 5 ],
  [ 1, 2, 4, 5, 3 ],
  [ 1, 2, 5, 3, 4 ],
  [ 1, 2, 5, 4, 3 ],
  [ 1, 3, 2, 4, 5 ],
  [ 1, 3, 2, 5, 4 ],
  [ 1, 3, 4, 2, 5 ],
  [ 1, 3, 4, 5, 2 ],
  [ 1, 3, 5, 2, 4 ],
  [ 1, 3, 5, 4, 2 ],
  [ 1, 4, 2, 3, 5 ],
  [ 1, 4, 2, 5, 3 ],
  [ 1, 4, 3, 2, 5 ],
  [ 1, 4, 3, 5, 2 ],
  [ 1, 4, 5, 2, 3 ],
  [ 1, 4, 5, 3, 2 ],
  [ 1, 5, 2, 3, 4 ],
  [ 1, 5, 2, 4, 3 ],
  [ 1, 5, 3, 2, 4 ],
  [ 1, 5, 3, 4, 2 ],
  [ 1, 5, 4, 2, 3 ],
  [ 1, 5, 4, 3, 2 ],
  [ 2, 1, 3, 4, 5 ],
  [ 2, 1, 3, 5, 4 ],
  [ 2, 1, 4, 3, 5 ],
  [ 2, 1, 4, 5, 3 ],
  [ 2, 1, 5, 3, 4 ],
  [ 2, 1, 5, 4, 3 ],
  [ 2, 3, 1, 4, 5 ],
  [ 2, 3, 1, 5, 4 ],
  [ 2, 3, 4, 1, 5 ],
  [ 2, 3, 4, 5, 1 ],
  [ 2, 3, 5, 1, 4 ],
  [ 2, 3, 5, 4, 1 ],
  [ 2, 4, 1, 3, 5 ],
  [ 2, 4, 1, 5, 3 ],
  [ 2, 4, 3, 1, 5 ],
  [ 2, 4, 3, 5, 1 ],
  [ 2, 4, 5, 1, 3 ],
  [ 2, 4, 5, 3, 1 ],
  [ 2, 5, 1, 3, 4 ],
  [ 2, 5, 1, 4, 3 ],
  [ 2, 5, 3, 1, 4 ],
  [ 2, 5, 3, 4, 1 ],
  [ 2, 5, 4, 1, 3 ],
  [ 2, 5, 4, 3, 1 ],
  [ 3, 1, 2, 4, 5 ],
  [ 3, 1, 2, 5, 4 ],
  [ 3, 1, 4, 2, 5 ],
  [ 3, 1, 4, 5, 2 ],
  [ 3, 1, 5, 2, 4 ],
  [ 3, 1, 5, 4, 2 ],
  [ 3, 2, 1, 4, 5 ],
  [ 3, 2, 1, 5, 4 ],
  [ 3, 2, 4, 1, 5 ],
  [ 3, 2, 4, 5, 1 ],
  [ 3, 2, 5, 1, 4 ],
  [ 3, 2, 5, 4, 1 ],
  [ 3, 4, 1, 2, 5 ],
  [ 3, 4, 1, 5, 2 ],
  [ 3, 4, 2, 1, 5 ],
  [ 3, 4, 2, 5, 1 ],
  [ 3, 4, 5, 1, 2 ],
  [ 3, 4, 5, 2, 1 ],
  [ 3, 5, 1, 2, 4 ],
  [ 3, 5, 1, 4, 2 ],
  [ 3, 5, 2, 1, 4 ],
  [ 3, 5, 2, 4, 1 ],
  [ 3, 5, 4, 1, 2 ],
  [ 3, 5, 4, 2, 1 ],
  [ 4, 1, 2, 3, 5 ],
  [ 4, 1, 2, 5, 3 ],
  [ 4, 1, 3, 2, 5 ],
  [ 4, 1, 3, 5, 2 ],
  [ 4, 1, 5, 2, 3 ],
  [ 4, 1, 5, 3, 2 ],
  [ 4, 2, 1, 3, 5 ],
  [ 4, 2, 1, 5, 3 ],
  [ 4, 2, 3, 1, 5 ],
  [ 4, 2, 3, 5, 1 ],
  [ 4, 2, 5, 1, 3 ],
  [ 4, 2, 5, 3, 1 ],
  [ 4, 3, 1, 2, 5 ],
  [ 4, 3, 1, 5, 2 ],
  [ 4, 3, 2, 1, 5 ],
  [ 4, 3, 2, 5, 1 ],
  [ 4, 3, 5, 1, 2 ],
  [ 4, 3, 5, 2, 1 ],
  [ 4, 5, 1, 2, 3 ],
  [ 4, 5, 1, 3, 2 ],
  [ 4, 5, 2, 1, 3 ],
  [ 4, 5, 2, 3, 1 ],
  [ 4, 5, 3, 1, 2 ],
  [ 4, 5, 3, 2, 1 ],
  [ 5, 1, 2, 3, 4 ],
  [ 5, 1, 2, 4, 3 ],
  [ 5, 1, 3, 2, 4 ],
  [ 5, 1, 3, 4, 2 ],
  [ 5, 1, 4, 2, 3 ],
  [ 5, 1, 4, 3, 2 ],
  [ 5, 2, 1, 3, 4 ],
  [ 5, 2, 1, 4, 3 ],
  [ 5, 2, 3, 1, 4 ],
  [ 5, 2, 3, 4, 1 ],
  [ 5, 2, 4, 1, 3 ],
  [ 5, 2, 4, 3, 1 ],
  [ 5, 3, 1, 2, 4 ],
  [ 5, 3, 1, 4, 2 ],
  [ 5, 3, 2, 1, 4 ],
  [ 5, 3, 2, 4, 1 ],
  [ 5, 3, 4, 1, 2 ],
  [ 5, 3, 4, 2, 1 ],
  [ 5, 4, 1, 2, 3 ],
  [ 5, 4, 1, 3, 2 ],
  [ 5, 4, 2, 1, 3 ],
  [ 5, 4, 2, 3, 1 ],
  [ 5, 4, 3, 1, 2 ],
  [ 5, 4, 3, 2, 1 ]
]
*/
